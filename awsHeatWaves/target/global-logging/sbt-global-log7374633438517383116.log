[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\alvar\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\alvar\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.8.0 (Amazon.com Inc. Java 1.8.0_322)
[debug]       Load.loadUnit: plugins took 229.6332ms
[debug]       Load.loadUnit: defsScala took 0.3081ms
[debug] [Loading] Scanning directory C:\Users\alvar\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\alvar\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 23.4008 ms
[debug]           Load.resolveProject(global-plugins) took 60.5643ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\alvar\.sbt\1.0\plugins, plugins: List(<none>))) took 115.069801ms
[debug] [Loading] Done in C:\Users\alvar\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 142.4984ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.3948ms
[debug]     Load.loadUnit(file:/C:/Users/alvar/.sbt/1.0/plugins/, ...) took 381.5973ms
[debug]   Load.apply: load took 593.7412ms
[debug]   Load.apply: resolveProjects took 10.4857ms
[debug]   Load.apply: finalTransforms took 77.0208ms
[debug]   Load.apply: config.delegates took 11.8908ms
[debug]   Load.apply: Def.make(settings)... took 517.571901ms
[debug]   Load.apply: structureIndex took 111.291701ms
[debug]   Load.apply: mkStreams took 1.925ms
[info] loading global plugins from C:\Users\alvar\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 3281.729599ms
[debug]           Load.loadUnit: plugins took 25.0105ms
[debug]           Load.loadUnit: defsScala took 0.0171ms
[debug] [Loading] Scanning directory D:\TFGAlvaroSanchez\awsHeatWaves\project
[debug]             Load.loadUnit: mkEval took 7.2134ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in D:\TFGAlvaroSanchez\awsHeatWaves\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 2.306299 ms
[info] loading settings for project awsheatwaves-build from plugins.sbt,idea.sbt ...
[debug]               Load.resolveProject(awsheatwaves-build) took 3.786101ms
[debug]             Load.loadTransitive: finalizeProject(Project(id awsheatwaves-build, base: D:\TFGAlvaroSanchez\awsHeatWaves\project, plugins: List(<none>))) took 6.829099ms
[debug] [Loading] Done in D:\TFGAlvaroSanchez\awsHeatWaves\project, returning: (awsheatwaves-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 2553.588ms
[debug]           Load.loadUnit: cleanEvalClasses took 4.764201ms
[debug]         Load.loadUnit(file:/D:/TFGAlvaroSanchez/awsHeatWaves/project/, ...) took 2584.4261ms
[debug]       Load.apply: load took 2585.6629ms
[debug]       Load.apply: resolveProjects took 0.104901ms
[debug]       Load.apply: finalTransforms took 9.950099ms
[debug]       Load.apply: config.delegates took 0.5838ms
[debug]       Load.apply: Def.make(settings)... took 98.6282ms
[debug]       Load.apply: structureIndex took 34.0332ms
[debug]       Load.apply: mkStreams took 0.0028ms
[info] loading project definition from D:\TFGAlvaroSanchez\awsHeatWaves\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 6817.1274ms
[debug]     Load.loadUnit: defsScala took 0.005501ms
[debug] [Loading] Scanning directory D:\TFGAlvaroSanchez\awsHeatWaves
[debug]       Load.loadUnit: mkEval took 0.453499ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in D:\TFGAlvaroSanchez\awsHeatWaves, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbtassembly.AssemblyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbtassembly.AssemblyPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,sbtassembly.AssemblyPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 3.3817 ms
[info] loading settings for project awsheatwaves from build.sbt ...
[debug]         Load.resolveProject(awsheatwaves) took 51.5535ms
[debug]       Load.loadTransitive: finalizeProject(Project(id awsheatwaves, base: D:\TFGAlvaroSanchez\awsHeatWaves, plugins: List(<none>))) took 56.6966ms
[debug] [Loading] Done in D:\TFGAlvaroSanchez\awsHeatWaves, returning: (awsheatwaves)
[debug]     Load.loadUnit: loadedProjectsRaw took 5308.203ms
[debug]     Load.loadUnit: cleanEvalClasses took 10.7473ms
[debug]   Load.loadUnit(file:/D:/TFGAlvaroSanchez/awsHeatWaves/, ...) took 12137.076401ms
[debug] Load.apply: load took 12139.4928ms
[debug] Load.apply: resolveProjects took 0.1727ms
[debug] Load.apply: finalTransforms took 41.6335ms
[debug] Load.apply: config.delegates took 0.5176ms
[debug] Load.apply: Def.make(settings)... took 208.9537ms
[debug] Load.apply: structureIndex took 35.689401ms
[debug] Load.apply: mkStreams took 0.0034ms
[info] set current project to awsHeatWaves (in build file:/D:/TFGAlvaroSanchez/awsHeatWaves/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 61955 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 61955, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to awsHeatWaves (in build file:/D:/TFGAlvaroSanchez/awsHeatWaves/)
[debug] > Exec(idea-shell, None, None)
